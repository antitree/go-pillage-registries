name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: read

jobs:
  release:
    runs-on: ubuntu-latest
    # enable keyless signing via Sigstore OIDC
    env:
      COSIGN_EXPERIMENTAL: "1"
    permissions:
      contents: write  # allow creating GitHub releases via API
      packages: write
      id-token: write  # required for keyless Cosign OIDC
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Set up Go
        uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4.2.1
        with:
          go-version: '1.24'

      - name: Verify build
        run: |
          go build ./...
          go test ./...

      - name: Build binaries
        run: |
          mkdir dist
          for GOOS in linux darwin windows; do
            for GOARCH in amd64; do
              BIN="pilreg-$GOOS-$GOARCH"
              EXT=""
              if [ "$GOOS" = "windows" ]; then EXT=".exe"; fi
              GOOS=$GOOS GOARCH=$GOARCH CGO_ENABLED=0 go build -o "$BIN$EXT" ./cmd/pilreg
              tar -czvf "dist/$BIN.tar.gz" "$BIN$EXT"
              rm "$BIN$EXT"
            done
          done

      - name: Install Cosign
        uses: sigstore/cosign-installer@398d4b0eeef1380460a10c8013a76f728fb906ac # v3.9.1

      # Clear any stale TUF metadata before keyless signing
      - name: Clear Sigstore TUF cache
        run: rm -rf ~/.sigstore

      # Keyless Cosign: init OIDC, verify identity, then sign blobs
      - name: Sign release archives (keyless)
        run: |
          cosign initialize
          for f in dist/*.tar.gz; do
            COSIGN_YES=true cosign sign-blob --output-signature "$f.sig" "$f"
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: dist/*
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2.2.0

      # Create and use a new buildx builder instance
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55 # v2.10.0

      - name: Build and push Docker image
        uses: docker/build-push-action@0a97817b6ade9f46837855d676c4cca3a2471fc9 # v4.2.1
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/go-pillage-registries:latest
            ghcr.io/${{ github.repository_owner }}/go-pillage-registries:${{ github.ref_name }}

      - name: Sign Docker images with Cosign (keyless)
        run: |
          cosign initialize
          COSIGN_YES=true cosign sign ghcr.io/${{ github.repository_owner }}/go-pillage-registries:latest
          COSIGN_YES=true cosign sign ghcr.io/${{ github.repository_owner }}/go-pillage-registries:${{ github.ref_name }}
